// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Model {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String   
  description     String
  huggingFaceLink String   @unique
  issues          Issue[]
}

model Issue {
  id            String       @id @default(cuid())
  name          String
  description   String?
  authorId      String
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  status        IssueStatus  @default(Open)
  upvotes       Int          @default(0)
  downvotes     Int          @default(0)
  tags          String[]
  triggerPrompt String
  reasoning     String
  badResponse   String
  modelId       String
  model         Model        @relation(fields: [modelId], references: [id], onDelete: Cascade)
  suggestions   Suggestion[]
  comments      Comments[]

  @@index([modelId])
}

model Comments {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  authorId  String
  issueId   String
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([issueId])
}

model Suggestion {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  issueId     String
  issue       Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  isSynthetic Boolean  @default(false)
  text        String
  evalScore   Int      @default(1)
  authorId    String?

  @@index([issueId])
}

enum IssueStatus {
  Open
  Closed
}
